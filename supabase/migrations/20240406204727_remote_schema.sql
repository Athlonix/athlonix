
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."COMMENTS" (
    "id" integer NOT NULL,
    "content" "text" NOT NULL,
    "id_comment" integer
);

ALTER TABLE "public"."COMMENTS" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."COMMENTS_POSTS" (
    "id_post" integer NOT NULL,
    "id_comment" integer NOT NULL
);

ALTER TABLE "public"."COMMENTS_POSTS" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."POSTS" (
    "id" integer NOT NULL,
    "content" "text" NOT NULL,
    "title" "text" NOT NULL
);

ALTER TABLE "public"."POSTS" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ROLES" (
    "id" integer NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."ROLES" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."USERS" (
    "id" integer NOT NULL,
    "email" character varying(255) NOT NULL,
    "username" "text" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "id_referer" integer NOT NULL,
    "id_role" integer
);

ALTER TABLE "public"."USERS" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."USERS_COMMENTS" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "like" integer,
    "id_comment" integer,
    "id_user" integer
);

ALTER TABLE "public"."USERS_COMMENTS" OWNER TO "postgres";

ALTER TABLE "public"."USERS_COMMENTS" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."USERS_COMMENTS_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."USERS_POSTS" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "like" integer,
    "id_user" integer NOT NULL,
    "id_post" integer NOT NULL
);

ALTER TABLE "public"."USERS_POSTS" OWNER TO "postgres";

ALTER TABLE "public"."USERS_POSTS" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."USERS_POSTS_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."USERS_COMMENTS"
    ADD CONSTRAINT "USERS_COMMENTS_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."USERS_POSTS"
    ADD CONSTRAINT "USERS_POSTS_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."COMMENTS"
    ADD CONSTRAINT "comments_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."POSTS"
    ADD CONSTRAINT "posts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ROLES"
    ADD CONSTRAINT "roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."USERS"
    ADD CONSTRAINT "users_email_key" UNIQUE ("email");

ALTER TABLE ONLY "public"."USERS"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."COMMENTS"
    ADD CONSTRAINT "comments_id_comment_fkey" FOREIGN KEY ("id_comment") REFERENCES "public"."COMMENTS"("id");

ALTER TABLE ONLY "public"."COMMENTS_POSTS"
    ADD CONSTRAINT "public_COMMENTS_POSTS_id_comment_fkey" FOREIGN KEY ("id_comment") REFERENCES "public"."COMMENTS"("id");

ALTER TABLE ONLY "public"."COMMENTS_POSTS"
    ADD CONSTRAINT "public_COMMENTS_POSTS_id_post_fkey" FOREIGN KEY ("id_post") REFERENCES "public"."POSTS"("id");

ALTER TABLE ONLY "public"."USERS_COMMENTS"
    ADD CONSTRAINT "public_USERS_COMMENTS_id_comment_fkey" FOREIGN KEY ("id_comment") REFERENCES "public"."COMMENTS"("id");

ALTER TABLE ONLY "public"."USERS_COMMENTS"
    ADD CONSTRAINT "public_USERS_COMMENTS_id_user_fkey" FOREIGN KEY ("id_user") REFERENCES "public"."USERS"("id");

ALTER TABLE ONLY "public"."USERS_POSTS"
    ADD CONSTRAINT "public_USERS_POSTS_id_post_fkey" FOREIGN KEY ("id_post") REFERENCES "public"."POSTS"("id");

ALTER TABLE ONLY "public"."USERS_POSTS"
    ADD CONSTRAINT "public_USERS_POSTS_id_user_fkey" FOREIGN KEY ("id_user") REFERENCES "public"."USERS"("id");

ALTER TABLE ONLY "public"."USERS"
    ADD CONSTRAINT "public_USERS_id_role_fkey" FOREIGN KEY ("id_role") REFERENCES "public"."ROLES"("id");

ALTER TABLE ONLY "public"."USERS"
    ADD CONSTRAINT "users_id_referer_fkey" FOREIGN KEY ("id_referer") REFERENCES "public"."USERS"("id");

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."COMMENTS" TO "anon";
GRANT ALL ON TABLE "public"."COMMENTS" TO "authenticated";
GRANT ALL ON TABLE "public"."COMMENTS" TO "service_role";

GRANT ALL ON TABLE "public"."COMMENTS_POSTS" TO "anon";
GRANT ALL ON TABLE "public"."COMMENTS_POSTS" TO "authenticated";
GRANT ALL ON TABLE "public"."COMMENTS_POSTS" TO "service_role";

GRANT ALL ON TABLE "public"."POSTS" TO "anon";
GRANT ALL ON TABLE "public"."POSTS" TO "authenticated";
GRANT ALL ON TABLE "public"."POSTS" TO "service_role";

GRANT ALL ON TABLE "public"."ROLES" TO "anon";
GRANT ALL ON TABLE "public"."ROLES" TO "authenticated";
GRANT ALL ON TABLE "public"."ROLES" TO "service_role";

GRANT ALL ON TABLE "public"."USERS" TO "anon";
GRANT ALL ON TABLE "public"."USERS" TO "authenticated";
GRANT ALL ON TABLE "public"."USERS" TO "service_role";

GRANT ALL ON TABLE "public"."USERS_COMMENTS" TO "anon";
GRANT ALL ON TABLE "public"."USERS_COMMENTS" TO "authenticated";
GRANT ALL ON TABLE "public"."USERS_COMMENTS" TO "service_role";

GRANT ALL ON SEQUENCE "public"."USERS_COMMENTS_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."USERS_COMMENTS_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."USERS_COMMENTS_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."USERS_POSTS" TO "anon";
GRANT ALL ON TABLE "public"."USERS_POSTS" TO "authenticated";
GRANT ALL ON TABLE "public"."USERS_POSTS" TO "service_role";

GRANT ALL ON SEQUENCE "public"."USERS_POSTS_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."USERS_POSTS_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."USERS_POSTS_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
